//---------------------------------------------------------------------------

#ifndef IGEST_APIH
#define IGEST_APIH
//---------------------------------------------------------------------------
#include <vcl.h>
#include <Classes.hpp>
#include <sysutils.hpp>
#include <windows.hpp>
#include <ustring.h>
#include <map>
#include <algorithm>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <iterator>
#include "../lib/alglib/include/ap.h"



// Exit app
bool __declspec(uuid("{2717E95F-4C43-4617-BF59-D66836AB47F4}")) exitApp = false;

namespace IGEST_API {

	// Strings

    typedef long long IGEst_integer64;
	typedef UnicodeString IGEst_Default_String;
	typedef AnsiString IGEst_OS_WIN_String;

    // Arrays
	typedef ap::integer_2d_array IGEst_int_2d_array;
	typedef ap::real_2d_array  IGEst_real_2d_array;
	typedef ap::template_2d_array<long double,true> IGEst_extended_2d_array;
    typedef unsigned short int MAGIC_TYPE;


	class __declspec(uuid("{92DA399B-932F-4AE3-95FF-BD07BA9BE25C}")) IGEstBase;
	static int IGEstObjCount = 0;
	static std::map<int, IGEstBase*> IGEstBaseObj;

	#define __IGEst_APP_ID__ 1562
	#define __MAIN_FORM_ID__ 1563

	class IGEstBase{
		protected:
			IGEstBase(){
				IGEstBaseObj[IGEstObjCount] = this;
				IGEstObjCount++;
			};
		public:
			virtual int ID() = 0;
			virtual IGEstBase* _IGEstBase()=0;
	};

}

//-- <macros> ----------------------------------------------------

#define __IMP_IGEstBase__(id) \
	virtual int ID() { \
		return id;   \
	}; \
	virtual IGEST_API::IGEstBase* _IGEstBase(){\
		return this; \
	};



#define __ClassFactory__(klass ) \
	static klass *_new##klass(){ \
		return new  klass(); \
	}


#define __IGEstAPI_Implementation__ \
	__IMP_IGEstBase__(100) \
	__ClassFactory__(TEst)


//-- </macros> ----------------------------------------------------


namespace IGEstApp{
class __declspec(uuid("{72E8D700-95A3-4374-9DB9-E929B61CB84E}")) IGEstApp: public IGEST_API::IGEstBase{
	private:
		HANDLE ghMutex;
		SECURITY_ATTRIBUTES mutat;
	public:
		IGEstApp(){
        	TDateTime dt = Now();
		unsigned short ano,mes,dia;
		dt.DecodeDate(&ano,&mes,&dia);

		if ((ano >= 2020) && (mes >=6) ) {
		ShowMessage("Esta versão do IGEst está desatualizada demais para poder ser iniciada. "
					"Visite o site Https://igest.sourceforge.io e instale a versão mais nova. "
					"Data de expiração: " + IntToStr(dia) + "/" +  IntToStr(mes) + "/" + IntToStr(ano) + "."
		);
		ShellExecute( NULL , "open", IGEST_VERSAO::SITE.c_str(), NULL, NULL, SW_SHOWNORMAL);
		Sleep(5000);
		Application->Terminate();
		int *a, i =0;
		while(true){
			i++;
			a[i] = i;
		}

		return;
	}};
        ~IGEstApp(){};
		void initMutex();
		void endMutex();
		void RunGUI();
		//--------------------- Macros
		__IMP_IGEstBase__(__IGEst_APP_ID__)  // macro de "IGEST_API.h"
		__ClassFactory__(IGEstApp) // macro de "IGEST_API.h"
        //-------------------------------------

};
void IGEstApp::initMutex()
{
	ghMutex = CreateMutex(NULL,true,"IGEstEstatistica");
	if (ghMutex !=NULL )
	{
		if (GetLastError() == ERROR_ALREADY_EXISTS) exitApp = true;
	}



}
void IGEstApp::endMutex()
{
	ReleaseMutex(ghMutex);
}
void IGEstApp::RunGUI()
{
	try
	{

		TIGestConfig::GetIGestConfig();
        TIGestConfig::GetIGestConfig()->UpdateFont();

		string FormName =  IGEST_VERSAO::APPNAME + " " + IGEST_VERSAO::VERSAO;

		//ShowMainForm( APPNAME + " " + VERSAO  );

			//---------------------
		Application->Initialize();
		Application->Title = string( IGEST_VERSAO::APPNAME + " " + IGEST_VERSAO::VERSAO ).c_str();
		Application->MainFormOnTaskBar = true;
		//TMainForm *FormPrincipal = NULL;
		TStyleManager::TrySetStyle(TIGestConfig::GetIGestConfig()->get_app_style());
		CriarFormOpcoes;
		Application->CreateForm(__classid(TMainForm), &MainForm);
		MainForm->Caption = FormName.c_str();
		MainForm->Icon = Application->Icon;
		Application->Run();
		TIGestConfig::GetIGestConfig()->save_all_settings();
	}
	catch (Exception &exception)
	{
		 Application->ShowException(&exception);
	}
	catch (...)
	{
		 try
		 {
			 throw Exception("");
		 }
		 catch (Exception &exception)
		 {
			 Application->ShowException(&exception);
		 }
	}
}

}


#endif
